esphome:
  name: wireless-speaker
  friendly_name: Wireless Speaker
  # Set volume to 15% on boot
  on_boot:
    priority: -100 # Run after initialization
    then:
      - media_player.volume_set: 
          id: wireless_speaker
          volume: 0.15

esp32:
  board: esp32dev

# Enable logging. Default is DEBUG
logger:
  level: DEBUG

# Global variables to track the current volume and mute state
globals:
  - id: current_volume
    type: float
    restore_value: yes
    initial_value: '0.15'

  - id: previous_volume
    type: float
    restore_value: no
    initial_value: '0.15'

  - id: is_muted
    type: bool
    restore_value: no
    initial_value: 'false'

# Enable Home Assistant API
api:
  encryption:
    key: !secret ha_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

# Enable wireless connectivity to the network
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # The local network is not .local
  domain: ".home.arpa"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Wireless-Speaker"
    password: !secret wifi_ap_password

captive_portal:

# Enable the ESP32 local webserver
web_server:
  port: 80

i2s_audio: 
  id: dac_connect
  i2s_lrclk_pin: GPIO27  # Pin for Left/Right Clock 
  i2s_bclk_pin: GPIO25  # Pin for Bit Clock 

media_player: 
  - platform: i2s_audio  # Defines a media player using I2S audio  
    dac_type: external  # Specifies that an external DAC is used 
    i2s_dout_pin: GPIO26  # Pin for Data Out 
    i2s_audio_id: dac_connect
    mode: stereo
    id: wireless_speaker # The ID of the media player
    name: None  # Uses the friendly name of the device.

# Reset button
button:
  - platform: restart
    name: "Restart ESP"
    id: restart_button

# Binary sensors for the volume up and down buttons.
binary_sensor:
  - platform: gpio
    pin: GPIO32
    name: "Volume Up Button"
    id: volume_up_btn
    on_press:
      then:
        - script.execute: volume_up

  - platform: gpio
    pin: GPIO33
    name: "Volume Down Button"
    id: volume_down_btn
    on_press:
      then:
        - script.execute: volume_down

  - platform: gpio
    pin: GPIO32
    id: volume_up_hold
    on_multi_click:
      - timing:
          - ON for at least 3s
        then:
          - script.execute: check_reset

  - platform: gpio
    pin: GPIO33
    id: volume_down_hold
    on_multi_click:
      - timing:
          - ON for at least 3s
        then:
          - script.execute: check_reset

# Scripts for the volume control
script:
  - id: volume_up
    then:
      - if:
          condition:
            lambda: 'return !id(is_muted);'
          then:
            - lambda: |-
                id(current_volume) = std::min(1.0f, id(current_volume) + 0.05f);
            - media_player.volume_set:
                id: wireless_speaker
                volume: !lambda 'return id(current_volume);'

  - id: volume_down
    then:
      - if:
          condition:
            lambda: 'return !id(is_muted);'
          then:
            - lambda: |-
                id(current_volume) = std::max(0.0f, id(current_volume) - 0.05f);
            - media_player.volume_set:
                id: wireless_speaker
                volume: !lambda 'return id(current_volume);'

  - id: toggle_mute
    then:
      - if:
          condition:
            lambda: 'return id(is_muted);'
          then:
            - lambda: |-
                id(current_volume) = id(previous_volume);
                id(is_muted) = false;
            - media_player.volume_set:
                id: wireless_speaker
                volume: !lambda 'return id(current_volume);'
          else:
            - lambda: |-
                id(previous_volume) = id(current_volume);
                id(is_muted) = true;
            - media_player.volume_set:
                id: wireless_speaker
                volume: 0.0

  - id: check_reset
    then:
      - if:
          condition:
            and:
              - binary_sensor.is_on: volume_up_hold
              - binary_sensor.is_on: volume_down_hold
          then:
            - logger.log: "Resetting device..."
            - button.press: restart_button

# Automation to detect simultaneous presses of the volume up/down buttons
interval:
  - interval: 500ms
    then:
      - if:
          condition:
            and:
              - binary_sensor.is_on: volume_up_btn
              - binary_sensor.is_on: volume_down_btn
          then:
            - script.execute: toggle_mute
